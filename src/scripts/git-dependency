#!/usr/bin/env python
"""This git extension maps out the dependency of commit(s).

Run git-dependency --help to see help for usage

Copyright(C) Stanford University 2010
Author ykk
Date February 2010
"""
import commands
import getopt
import sys

def usage():
    """Display usage
    """
    print "Usage "+sys.argv[0]+" <options> commit(s)\n"+\
          "Options:\n"+\
          "-e/--exclude\n\tExclude file (can be used multiple times)\n"+\
          "-f/--file\n\tInclude this file in search for related commits\n"+\
          "-h/--help\n\tPrint this usage guide\n"+\
          "-p/--package\n\tPackage commits\n"+\
          "-s/--since\n\tSpecify commit since\n"+\
          "--separator\n\tSpecify separator (default is newline)\n"+\
          "-v/--verbose\n\tSpecify verbose output"

class commit:
    """Class hold a commit
    """
    def __init__(self, commitstr):
        """ Initialize commit object with hash and content
        """
        ##Hash of commit
        self.hash = commitstr[0].split()[1]
        ##Changed file list 
        self.content = []
        self.content.extend(commitstr[1:])

    def containfile(self,filelist):
        """Check if commit contains one or more of
        these files
        """
        for f in self.content:
            if (f in filelist):
                return True
        return False

    def __str__(self):
        return self.hash+"\n"+str(self.content)
    
def get_commits(since=None,until="HEAD"):
    """Get commits between since and until
    """
    commits = []
    cmd = "git log --pretty=format:\"commit %H\" --name-only "
    if (since != None):
        cmd += since+".."
    cmd+=until
    c = commands.getoutput(cmd).strip()
    c = c.split("\n")
    commitstr=[]
    for i in range(0, len(c)):
        if (len(commitstr) == 0):
            commitstr.append(c[i])
        else:
            if (c[i][:6] == "commit"):
                commits.append(commit(commitstr))
                commitstr = []
            commitstr.append(c[i])
    commits.append(commit(commitstr))
    return commits

def add_files(masterlist, filelist, exclude=None):
    """Add filelist to masterlist without repeat
    """
    excludelist=[]
    if (exclude != None):
        excludelist = exclude
    for f in filelist:
        if ((not (f in masterlist)) and
            (not (f in excludelist)) and
            (not (f.strip() == ""))):
            masterlist.append(f.strip())

#Parse options and arguments
##earliest commit
since=None
##files excluded
excludelist=[]
##Verbosity
verbose=False
##Separator
separator="\n"
##Package commits
package=False
##Related files
filelist = []
try:
    opts, args = getopt.getopt(sys.argv[1:], "hs:e:vpf:",
                               ["help","since=","exclude=","verbose",
                                "separator=","package","file="])
except getopt.GetoptError:
    usage()
    sys.exit(2)

for opt,arg in opts:
    if (opt in ("-h","--help")):
        usage()
        sys.exit(0)
    elif (opt in ("-s","--since")):
        since=arg
    elif (opt in ("-v","--verbose")):
        verbose=True
    elif (opt in ("-p","--package")):
        package=True
    elif (opt in ("-f","--file")):
        filelist.append(arg)
    elif (opt in ("-e","--exclude")):
        excludelist.append(arg)
    elif (opt in ("--separator")):
        separator=arg
    else:
        print "Unhandled option :"+opt
        usage()
        sys.exit(2)

#Check there is at least 1 commit
if ((len(args) == 0) and (len(filelist) == 0)):
    print "At least one commit/file is needed as argument"
    usage()
    sys.exit(2)
    
if (len(args) == 0):
    until = "HEAD"
else:
    until = commands.getoutput("git-latest "+" ".join(args))
commits = get_commits(since,until)
dependencies=[]
for commit in commits:
    if (commit.hash in args or
        commit.containfile(filelist)):
        dependencies.append(commit.hash)
        add_files(filelist,commit.content,excludelist)

print separator.join(dependencies)
if (verbose):
    print "\n".join(filelist)
if (package):
    for dependency in dependencies:
        commands.getoutput("git format-patch -1"+\
                           " --start-number="+str(dependencies.index(dependency)+1).strip()+\
                           " "+dependency)

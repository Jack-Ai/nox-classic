/* Copyright 2008 (C) Nicira, Inc.
 *
 * This file is part of NOX.
 *
 * NOX is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * NOX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NOX.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef FLOW_EXPIRED_HH
#define FLOW_EXPIRED_HH 1

#include <boost/noncopyable.hpp>
#include "event.hh"
#include "flow-event.hh"
#include "ofp-msg-event.hh"
#include "xtoxll.h"

namespace vigil {

/** \ingroup noxevents
 *
 * Flow expired events are thrown for each openflow expiration message
 * received by the controller.  Expiration messages are sent by the
 * switches on flow timeout (either hard or soft).  Flow expirations
 * are only generated by switches if they to do so by the controller
 * (flow expirations are <b>not</b> enabled in NOX by default).
 *
 */

struct Flow_expired_event
    : public Event,
      public Ofp_msg_event,
      public Flow_event,
      boost::noncopyable
{
    Flow_expired_event(datapathid datapath_id_, uint32_t duration_,
                       uint64_t packet_count_, uint64_t byte_count_)
        : Event(static_get_name()), datapath_id(datapath_id_), 
          duration(duration_), packet_count(packet_count_), 
          byte_count(byte_count_) { }


    Flow_expired_event(const datapathid datapath_id_, 
                       const ofp_flow_expired *ofe,
                       std::auto_ptr<Buffer> buf);

    // -- only for use within python
    Flow_expired_event() : Event(static_get_name()) { ; }

    //! ID of switch sending the expiration message 
    datapathid datapath_id;
    //! Duration of the flow in seconds 
    uint32_t duration;
    uint64_t packet_count;
    uint64_t byte_count;

    const ofp_match* get_flow() const {
        return &get_flow_expired()->match;
    }

    const ofp_flow_expired* get_flow_expired() const {
        return reinterpret_cast<const ofp_flow_expired*>(get_ofp_msg());
    }

    static const Event_name static_get_name() {
        return "Flow_expired_event";
    }
};

inline
Flow_expired_event::Flow_expired_event(datapathid datapath_id_,
                                       const ofp_flow_expired *ofe,
                                       std::auto_ptr<Buffer> buf)
    : Event(static_get_name()), Ofp_msg_event(&ofe->header, buf),
      datapath_id(datapath_id_)
{
    duration     = ntohl(ofe->duration);
    packet_count = ntohll(ofe->packet_count);
    byte_count   = ntohll(ofe->byte_count);
}

} // namespace vigil

#endif /* flow-expired.hh */
